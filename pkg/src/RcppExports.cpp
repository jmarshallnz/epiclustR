// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// deviance
double deviance(List data, List state);
RcppExport SEXP epiclustR_deviance(SEXP dataSEXP, SEXP stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type state(stateSEXP);
    rcpp_result_gen = Rcpp::wrap(deviance(data, state));
    return rcpp_result_gen;
END_RCPP
}
// log_case_rate
Rcpp::NumericMatrix log_case_rate(List data, List state, bool smoothed, IntegerVector spatial);
RcppExport SEXP epiclustR_log_case_rate(SEXP dataSEXP, SEXP stateSEXP, SEXP smoothedSEXP, SEXP spatialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type state(stateSEXP);
    Rcpp::traits::input_parameter< bool >::type smoothed(smoothedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type spatial(spatialSEXP);
    rcpp_result_gen = Rcpp::wrap(log_case_rate(data, state, smoothed, spatial));
    return rcpp_result_gen;
END_RCPP
}
// expected_cases
Rcpp::NumericMatrix expected_cases(List data, List state, bool smoothed, IntegerVector spatial);
RcppExport SEXP epiclustR_expected_cases(SEXP dataSEXP, SEXP stateSEXP, SEXP smoothedSEXP, SEXP spatialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type state(stateSEXP);
    Rcpp::traits::input_parameter< bool >::type smoothed(smoothedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type spatial(spatialSEXP);
    rcpp_result_gen = Rcpp::wrap(expected_cases(data, state, smoothed, spatial));
    return rcpp_result_gen;
END_RCPP
}
// cases_per_time
Rcpp::NumericVector cases_per_time(List data, List state, bool smoothed, IntegerVector spatial);
RcppExport SEXP epiclustR_cases_per_time(SEXP dataSEXP, SEXP stateSEXP, SEXP smoothedSEXP, SEXP spatialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type state(stateSEXP);
    Rcpp::traits::input_parameter< bool >::type smoothed(smoothedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type spatial(spatialSEXP);
    rcpp_result_gen = Rcpp::wrap(cases_per_time(data, state, smoothed, spatial));
    return rcpp_result_gen;
END_RCPP
}
// rbernoulli
int rbernoulli(double p);
RcppExport SEXP epiclustR_rbernoulli(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rbernoulli(p));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
Rcpp::NumericVector rmvnorm(NumericVector mu, NumericMatrix eig_sigma);
RcppExport SEXP epiclustR_rmvnorm(SEXP muSEXP, SEXP eig_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type eig_sigma(eig_sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(mu, eig_sigma));
    return rcpp_result_gen;
END_RCPP
}
// update
Rcpp::List update(List data, List state, List prior, List control);
RcppExport SEXP epiclustR_update(SEXP dataSEXP, SEXP stateSEXP, SEXP priorSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type state(stateSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(update(data, state, prior, control));
    return rcpp_result_gen;
END_RCPP
}
